generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NEWS_VISIBILITY {
  HIDDEN
  VISIBLE
}

model News {
  id String @id @default(uuid())

  title                   String
  description             String?
  imageLink               String?
  originalPublicationDate DateTime
  originalLink            String
  externalId              String          @unique
  visibility              NEWS_VISIBILITY @default(VISIBLE)
  isDraft                 Boolean         @default(false)
  tags                    Tag[]
  promotions              Promotion[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tag {
  id String @id @default(uuid())

  name String
  news News[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SOURCE_PERIOD {
  DAILY
  HOURLY
}

// Of course, it will be better to divide fields mapping to separate table,
// where it will be connected as one-to-many sources
// It will give us possibilities to create some features like sharing of mappings between sources
// and it is better for architecture of app
// but it just takes more time to implement
model Source {
  id String @id @default(uuid())

  url         String
  name        String
  periodicity SOURCE_PERIOD
  isActive    Boolean       @default(true)

  titleKey           String
  descriptionKey     String?
  imageLinkKey       String?
  publicationDateKey String
  linkKey            String
  idKey              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PROMOTION_LOCATION {
  LIST
  SEARCH
}

enum PROMOTION_LOCATION_LIST_TYPE {
  MAIN
  TAG_FILTER
}

model PromotionConfig {
  id String @id @default(uuid())

  location          PROMOTION_LOCATION @unique
  promotionsPerPage Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// I do not like Promotions table,
// because for different promotion type we will have different fields, but table do not represents it
// (as an example we need to have "search" only when we have such location)
//
// Options to fix
// 1:
// In general, it will be better to use sql CHECK to make sure that
// we will have only needed fields
// but prisma do not has CHECK functionality
//
// 2:
// I think the best option is to divide it for different tables
// Like Search promotions and List promotions
// How to make different types of content in this approach? I do not know :<. Maybe just use two db's postgre and mongo
model Promotion {
  id String @id @default(uuid())

  locations PROMOTION_LOCATION[]

  // for list location
  listType PROMOTION_LOCATION_LIST_TYPE?
  priority Int?

  // for search location
  search String?

  // for text content
  text String?

  // for image content
  url String?

  // for image and text content
  link String?

  // for news content
  news   News?   @relation(fields: [newsId], references: [id])
  newsId String?

  isDraft Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([newsId])
}
